

# This file was *autogenerated* from the file ./solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0xaa0d3a677e1be0bf = Integer(0xaa0d3a677e1be0bf); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_42 = Integer(42); _sage_const_43 = Integer(43); _sage_const_42069 = Integer(42069); _sage_const_1p2 = RealNumber('1.2'); _sage_const_424 = Integer(424)
from pwn import *

# context.log_level = "debug"

poly = bin(_sage_const_0xaa0d3a677e1be0bf )[_sage_const_2 :]

F = PolynomialRing(GF(_sage_const_2 ), names=('x',)); (x,) = F._first_ngens(1)
P = x**_sage_const_64  + _sage_const_1 
for i in range(_sage_const_1 , _sage_const_64 ):
    P += int(poly[i]) * x**i
    
C = companion_matrix(P, format='left')

generation = []

for i in range(_sage_const_0 , _sage_const_64 ):
    # print(f"Generating {42+43*i}th rounds....")
    generation.append((C**(_sage_const_42 +_sage_const_43 *i))[_sage_const_0 ])

# Get 64 Result
p = remote("edu-ctf.csie.org", _sage_const_42069 )

result = []
money = _sage_const_1p2 
p.recvuntil(b"> ")
p.send(b"0\n"*_sage_const_64 )

for i in range(_sage_const_64 ):
    # print(f"prv money: {money}")

    nextMoney = float(p.recvline().strip(b" \n>"))

    # print(f"next money: {nextMoney}")

    if nextMoney < money:
        result.append(_sage_const_1 )
    else:
        result.append(_sage_const_0 )

    money = nextMoney
    # print(result)

# print(result)

b = vector(GF(_sage_const_2 ), _sage_const_64 , result)
A = matrix(GF(_sage_const_2 ), _sage_const_64 , generation)
init_state = A**-_sage_const_1 *b

sendto = []

for i in range(_sage_const_64 , _sage_const_424 ):
    tmp = _sage_const_42 +_sage_const_43 *i
    res = C**tmp*init_state
    sendto.append(res[_sage_const_0 ])

# print("\n".join([str(i) for i in sendto]).encode())

p.recvuntil(b"> ")
p.sendline("\n".join([str(i) for i in sendto]).encode())

print(p.recvall().decode())

p.close()

